//This is magma code used in the paper `Generalized Eckardt poins on del Pezzo surfaces of degree 1',
//by Julie Dejsardins, Yu Fu, Kelly Isham, and Rosa Winter.

==========================================
======== Code for Remark 3.4 =============
==========================================

//We define the 240 exceptional curves as vectors and define their intersection matrix.

function dot(x,y)
   return x[1]*y[1]-&+[x[i]*y[i] : i in [2..9]];
end function;
lst:=
[
<0, [ 1,  0,  0,  0,  0,  0,  0,  0]>,
<1, [-1, -1,  0,  0,  0,  0,  0,  0]>,
<2, [-1, -1, -1, -1, -1,  0,  0,  0]>,
<3, [-2, -1, -1, -1, -1, -1, -1,  0]>,
<4, [-2, -2, -2, -1, -1, -1, -1, -1]>,
<5, [-2, -2, -2, -2, -2, -2, -1, -1]>,
<6, [-3, -2, -2, -2, -2, -2, -2, -2]>
];
S8:=SymmetricGroup(8);
exc:={ [l[1]] cat [ l[2][i^g] : i in [1..8]] : g in S8, l in lst};
exc:=Sort([e: e in exc]);

M:=Matrix([ [ dot(e1,e2) : e2 in exc] : e1 in exc]);
for i in [1..240] do
 M[i,i]:=0;
  for j in [1..240] do
   if M[i,j] gt 0 then M[i,j]:=1; end if;
  end for;
end for;

//Next we define the intersection graphs on these 240 exceptional curves, with automorphism group W8.

Gexc:=Graph<240|M>; Wexc:=AutomorphismGroup(Gexc);

//To make computations easier, we look at the smaller graph with only cliques that include
//two exceptional curves that we fix. We choose numbers 9 and 22. They have intersection multiplicity 1.

e1:=exc[9]; e2:=exc[22];

//The following are all exceptional curves that intersect e1 and e2 with multiplicity 1 or 3.

T:=[e: e in exc|dot(e,e1) in [1,3] and dot(e,e2) in [1,3]];

//Now make the graph with only the exceptional curves in T (and we only care about multpli-
//cities 1 and 3).

weights:=[1,3];
M:=Matrix([ [ dot(a,b) : b in T] : a in T]);
    for i in [1..#T] do
      for j in [1..#T] do
      if M[i,j] in weights then M[i,j]:=1;
        else M[i,j]:=0; end if;
      end for;
    end for;

G1:=Graph<#T|M>;

//We find all cliques in G1 of size 8, since together with the fixed curves e1 and e2
//these are all the cliques of size 10. We use 'false' so that it also gives us non-
//maximal cliques.

A:=AllCliques(G1,8,false);


//Now we compute the orbits of the set A under the action of W8. To reduce computation time 
//we first sort A into a list P where the cliques are ordered by stabilizer size. 

L:=[];
for i in [1..#A] do
 K:=Set([Index(exc,T[Index(b)]):b in A[i]] cat [9,22]); //this is the clique in A after adding e1 and e2
 L[i]:=#Stabilizer(Wexc,K);
end for;
S:=Set(L);        //S is now a set of all different stabilizer sizes of all cliques in A
S:=[s:s in S];

P:=[];                  //a list of sets of cliques ordered by the size of their stabilizer.
for i in [1..#S] do
P[i]:=[A[j]:j in [1..#L]|L[j] eq S[i]];
end for;

//Now we take one representative of each orbit of each set of cliques with the same stabilizer size
//(we ordered first by stabilizer size since this gives smaller sets to sort into orbits).

list:=[];
for i in [1..#P] do
Cliques:=[];
repeat
K:=Set([Index(exc,T[Index(b)]):b in P[i][1]] cat [9,22]);
Append(~Cliques,K);
for a in P[i] do
if IsConjugate(Wexc,Set([Index(exc,T[Index(b)]):b in a] cat [9,22]),K) then Exclude(~P[i],a); end if;
end for;
until #P[i] eq 0;
Cliques;
for c in Cliques do
Append(~list,c);
end for;
end for;

//`list' now gives a list of one representative per orbit of the set A under the action of W8.



==========================================
====== Code for Proposition 3.7 ==========
==========================================

//Use the code for Remark 3.4 to define the 240 exceptional curves. The following list
//contains one representative for each of the 8 orbits of Theorem 3.3.

List:=[
[{ 9, 22, 31, 36, 99, 171, 177, 183, 192, 197 }],
[{ 9, 22, 31, 36, 99, 110, 180, 183, 197, 208 }],
[{ 9, 22, 31, 36, 99, 171, 177, 192, 197, 209 }],
[{ 9, 22, 31, 36, 156, 162, 168, 174, 176, 192 }],
[{ 9, 22, 31, 36, 156, 162, 181, 199, 214, 226 }],
[{ 9, 22, 31, 36, 99, 110, 180, 183, 197, 198 }],
[{ 9, 22, 31, 36, 99, 110, 117, 120, 176, 240 }],
[{ 9, 22, 31, 36, 156, 162, 168, 174, 176, 180 }]
];

//We now check which clique contains 4 exceptional curves that are all disjoint from another
//exceptional curve. We printe the cliques that have this, and see that cliques 4,5,8 do not.

for l in List do
  for a in l[1] do
  for b in l[1] do
  for c in l[1] do
  for d in l[1] do
  if #Set([a,b,c,d]) eq 4 and #[e:e in exc|dot(e,exc[a]) eq 0 and dot(e,exc[b]) eq 0 and dot(e,exc[c]) eq 0 and dot(e,exc[d]) eq 0] gt 0 then print l,a,b,c,d; break a; end if;
  end for; end for; end for; end for;
end for;



==========================================
====== Code to produce Table 1 ===========
==========================================

//The following list contains one representative for each of the 8 orbits of Theorem 3.3.

List:=[
[{ 9, 22, 31, 36, 99, 171, 177, 183, 192, 197 }],
[{ 9, 22, 31, 36, 99, 110, 180, 183, 197, 208 }],
[{ 9, 22, 31, 36, 99, 171, 177, 192, 197, 209 }],
[{ 9, 22, 31, 36, 156, 162, 168, 174, 176, 192 }],
[{ 9, 22, 31, 36, 156, 162, 181, 199, 214, 226 }],
[{ 9, 22, 31, 36, 99, 110, 180, 183, 197, 198 }],
[{ 9, 22, 31, 36, 99, 110, 117, 120, 176, 240 }],
[{ 9, 22, 31, 36, 156, 162, 168, 174, 176, 180 }]
];

//Wexc is the auromorphism group of the graph G as defined in the code for Remark 3.4.
//For each clique in `List' we compute the order of its stabilizer in Wexc and the order of
//the orbit. 

for i in [1..8] do
print i;
print "Stab",#Stabilizer(Wexc,List[i]);        
print "Orbit",696729600/#Stabilizer(Wexc,List[i][1]);   
print "---------------------------";                     
end for;

//We now compute suborbits of cliques that all contain two fixed exceptional curves
//e1, e2. 

//Load everything up to and including the definitions of Gexc and Wexc in code for Remark 3.4.

//We look at the smaller graph with only cliques that include two exceptional curves that we fix. 
//We choose numbers 9 and 22. 

e1:=exc[9]; e2:=exc[22];

//The following are all exceptional curves that intersect e1 and e2 with multiplicity 1 or 2.

T:=[e: e in exc|dot(e,e1) in [1,2] and dot(e,e2) in [1,2]];

//Now make the graph with only the exceptional curves in T (and we only care about multpli-
//cities 1 and 2).

weights:=[1,2];
M:=Matrix([ [ dot(a,b) : b in T] : a in T]);
    for i in [1..#T] do
      for j in [1..#T] do
      if M[i,j] in weights then M[i,j]:=1;
        else M[i,j]:=0; end if;
      end for;
    end for;

G1:=Graph<#T|M>;

//We find all cliques in G1 of size 8, since together with the fixed curves e1 and e1
//these are all the cliques of size 10. We put 'false' so that it also gives us non-
//maximal cliques.

A:=AllCliques(G1,8,false); 

//The following first sorts all cliques in A according to the size of their stabilizer
//under the action of Wexc, and within each set of cliques of the same stabilizer size
//we sort them up to conjugacy, so that we have only one representative of each orbit of
//the action of Wexc on A. 

L:=[];
for i in [1..#A] do
 K:=Set([Index(exc,T[Index(b)]):b in A[i]] cat [9,22]); //this is the clique in A after adding e1 and e2
 L[i]:=#Stabilizer(Wexc,K);
end for;
S:=Set(L); //S is now a set of all different stabilizer sizes of all cliques in A
S:=[s:s in S];

P:=[]; //a list of sets of cliques ordered by the size of their stabilizer.
#P;
for i in [1..#S] do
P[i]:=[A[j]:j in [1..#L]|L[j] eq S[i]];
#P[i];
end for;

for i in [1..#P] do
nl :=[];
for l in P[i] do
K:=Set([Index(exc,T[Index(b)]):b in l] cat [9,22]);
tt:=[exc[b]:b in K];
Append(~nl,tt);
end for;

//For each i = 1, .. #P, we write all the representatives to a file, converted into a more readable notation. 
//Each line is a representative. The first number is the degree of the curve, and the next numbers determine 
//how many times (in absolute value) the points P_1, ..., P_8 pass through that curve.

Str := "/home/kisham/magma/Outputs/10cliques" cat IntegerToString(i) cat "all_reps_convert.txt"; //replace this by a file of choice.
PrintFile(Str,nl);
end for;

//Now we take one representative of each orbit of each set of cliques with the same stabilizer size
//(we ordered first by stabilizer size since this gives smaller sets to sort into orbits).

list:=[];
for i in [1..#P] do
Cliques:=[];
repeat
K:=Set([Index(exc,T[Index(b)]):b in P[i][1]] cat [9,22]);
Append(~Cliques,K);
for a in P[i] do
if IsConjugate(Wexc,Set([Index(exc,T[Index(b)]):b in a] cat [9,22]),K) then Exclude(~P[i],a); end if;
end for;
until #P[i] eq 0;
Cliques;
for c in Cliques do
Append(~list,c);
end for;
end for;

//The list 'list' contains one representative per orbit, in terms of the numbering in the list 'exc'.
//Now we translate that into the elements in 'exc'.

for l in list do
[exc[b]:b in l];
end for;

//writing a single representative for each clique to a file
Str := "/home/kisham/magma/Outputs/10cliques_1rep.txt"; //replace this by a file of choice.
PrintFile(Str, list);

//Finally, we can find the intersection matrix of each of the cliques, so that we can distinguish their configurations. 

mat_list :=[];
for l in list do
dlist:=[[dot(exc[a],exc[b]):a in l]: b in l];
Append(~mat_list, dlist);
end for;

//writing the inclusion matrices to a file
Str := "/home/kisham/magma/Outputs/10cliques_intmat.txt"; //replace this by a file of choice.
PrintFile(Str, mat_list);




==========================================
======== Code for Section 5 ==============
==========================================

k:=Rationals();

R6<a,b,c,d,e,f>:=PolynomialRing(k,6);

P1:=[0,1,1];
P2:=[0,1,a];
P3:=[1,0,1];
P4:=[1,0,b];
P5:=[1,1,1];
P6:=[1,1,c];
P7:=[d,1,e];
P8:=[d,1,f];
PX:=[0,0,1];

pts:=[P1,P2,P3,P4,P5,P6,P7,P8,PX];

A:=PolynomialRing(k,3);

//S0 is be the set of equations saying that the points are not in general position

facts:=[];

deg:=1;
mons:=MonomialsOfDegree(A,deg);
for i1 in [1..8] do
  for i2 in [i1+1..8] do
    for i3 in [i2+1..8] do
    zeros:=[[Evaluate(M,pts[i]):M in mons]:i in [i1,i2,i3]];
    N:=Factorization(Determinant(Matrix(zeros)));
    Append(~facts,[f[1]:f in N]);
    end for;
  end for;
end for;

deg:=2;
mons:=MonomialsOfDegree(A,deg);
for i1 in [1..8] do
  for i2 in [i1+1..8] do
      zeros:=[[Evaluate(M,pts[i]):M in mons]:i in [1..8]|i ne i1 and i ne i2];
      N:=Factorization(Determinant(Matrix(zeros)));
      Append(~facts,[f[1]:f in N]);
  end for;
end for;

deg:=3;
mons:=MonomialsOfDegree(A,deg);
for i in [1,2,5,6,7,8] do
zeros:=[ [ Evaluate(M,P) : M in mons ] : P in pts[1..8]];
sing:=[ [ Evaluate(Derivative(M,A.j),pts[i]) : M in mons ] : j in [1,3] ];
 N:=Factorization(Determinant(Matrix(zeros cat sing)));
      Append(~facts,[f[1]:f in N]);
end for;
for i in [3,4] do
zeros:=[ [ Evaluate(M,P) : M in mons ] : P in pts[1..8]];
sing:=[ [ Evaluate(Derivative(M,A.j),pts[i]) : M in mons ] : j in [2,3] ];
 N:=Factorization(Determinant(Matrix(zeros cat sing)));
      Append(~facts,[f[1]:f in N]);
end for;

S0:=Set(&cat[fact:fact in facts]);

//Force the cubic c_{7,8} to go through PX. 

Q:=pts[7]; //the cubic will not go through this point
R:=pts[8]; //the cubic will be singular in this point

deg:=3;
mons:=&cat[ [m : m in MonomialsOfDegree(A,deg)] ];
zeros:=[ [ Evaluate(M,P) : M in mons ] : P in pts|P ne Q];
sing:=[ [ Evaluate(Derivative(M,A.i),R) : M in mons ] : i in [1,3] ]; 
N:=Matrix(zeros cat sing);
D:=Determinant(N);
FD:=Factorization(D);
for f in FD do
f[1] in S0; end for;

//Only the last factor of FD is not in S0; we call this F1. It is linear in a, and we denote its coefficients
//with respect to a.

F1:=FD[6][1];
CFD:=Coefficients(F1,a);
F1 eq CFD[2]*a + CFD[1];
 
p:=CFD[2]; q:=CFD[1];
Factorization(q);

FF:=Factorization((f-d)*p+q);
for f in FF do
f[1] in S0;
end for;

//We replace a by -q/p and compute again the points and equations determining that the points are not in general position.

R5<b,c,d,e,f>:=PolynomialRing(k,5);

p:=b*d^3 - b*d^2*f - b*d^2 + 2*b*d*f - b*d - b*f + b + c*f - c - d^2*f + d^2 + 
    d*f^2 - d - 2*f^2 + 2*f;
    
q:=-b*c*d^3 + b*c*d^2*f + 2*b*d^2*f - b*d^2 - 2*b*d*f^2 + b*d + b*f^2 - b*f + 
    c*d^2*f - c*d^2 - c*d*f^2 + 2*c*d*f - c*d - c*f^2 + c*f - 2*d*f^2 + 2*d*f + 
    2*f^3 - 2*f^2;

P1:=[0,1,1];
P2:=[0,p,-q];
P3:=[1,0,1];
P4:=[1,0,b];
P5:=[1,1,1];
P6:=[1,1,c];
P7:=[d,1,e];
P8:=[d,1,f];
PX:=[0,0,1];

pts:=[P1,P2,P3,P4,P5,P6,P7,P8,PX];

A:=PolynomialRing(k,3);

//S0 will be again the set of equations saying that the points are not in general position

facts:=[];

deg:=1;
mons:=MonomialsOfDegree(A,deg);
for i1 in [1..8] do
  for i2 in [i1+1..8] do
    for i3 in [i2+1..8] do
    zeros:=[[Evaluate(M,pts[i]):M in mons]:i in [i1,i2,i3]];
    N:=Factorization(Determinant(Matrix(zeros)));
    Append(~facts,[f[1]:f in N]);
    end for;
  end for;
end for;

deg:=2;
mons:=MonomialsOfDegree(A,deg);
for i1 in [1..8] do
  for i2 in [i1+1..8] do
      zeros:=[[Evaluate(M,pts[i]):M in mons]:i in [1..8]|i ne i1 and i ne i2];
      N:=Factorization(Determinant(Matrix(zeros)));
      Append(~facts,[f[1]:f in N]);
  end for;
end for;

deg:=3;
mons:=MonomialsOfDegree(A,deg);
for i in [1,2,5,6,7,8] do
zeros:=[ [ Evaluate(M,P) : M in mons ] : P in pts[1..8]];
sing:=[ [ Evaluate(Derivative(M,A.j),pts[i]) : M in mons ] : j in [1,3] ];
 N:=Factorization(Determinant(Matrix(zeros cat sing)));
      Append(~facts,[f[1]:f in N]);
end for;
for i in [3,4] do
zeros:=[ [ Evaluate(M,P) : M in mons ] : P in pts[1..8]];
sing:=[ [ Evaluate(Derivative(M,A.j),pts[i]) : M in mons ] : j in [2,3] ];
 N:=Factorization(Determinant(Matrix(zeros cat sing)));
      Append(~facts,[f[1]:f in N]);
end for;

S0:=Set(&cat[fact:fact in facts]);

//Force the cubic c_{8,7} to go through PX. 

Q:=pts[8]; //the cubic will not go through this point
R:=pts[7]; //the cubic will be singular in this point

deg:=3;
mons:=&cat[ [m : m in MonomialsOfDegree(A,deg)] ];
zeros:=[ [ Evaluate(M,P) : M in mons ] : P in pts|P ne Q];
sing:=[ [ Evaluate(Derivative(M,A.i),R) : M in mons ] : i in [1,3] ]; 
N:=Matrix(zeros cat sing);
D:=Determinant(N);
FD:=Factorization(D);
for f in FD do
f[1] in S0; end for;

//Only the last factor of FD is not in S0; we call this F2. 

F2:=FD[8][1];

A5:=AffineSpace(R5);
Sols:=Scheme(A5,F2);
Dimension(Sols);
IsIrreducible(Sols);
IsReduced(Sols);

//We intersect the algebraic set in A5 defined by F2 with hyperplanes b=-1, c=5/4, d=-1.

C:=Scheme(A5,b+1) meet Scheme(A5,c-5/4) meet Scheme(A5,d+1) meet Sols;

Genus(Curve(C));
PC:=PointSearch(C,100);

E:=EllipticCurve(ProjectiveClosure(Curve(C)),PC[1]);
Rank(E);



==========================================
======== Code for Theorem 6.5 ============
==========================================

//The first function determines whether a set of points is in general position over Fp. 

function GeneralPosition(R,pts,p)
  determinanten:=[];
  mons:=MonomialsOfDegree(R,1);
  for i1 in [1..8] do
	for i2 in [i1+1..8] do
	for i3 in [i2+1..8] do
	zeros:=[[Evaluate(m,pts[i]):m in mons]:i in [i1,i2,i3]];
	d:= Determinant(Matrix(zeros));
	if d mod p eq 0 then
	return false;
	end if;
	end for;
	end for;
  end for;
  mons:=MonomialsOfDegree(R,2);
  for i1 in [1..8] do
	for i2 in [i1+1..8] do
	zeros:=[[Evaluate(m,pts[i]):m in mons]:i in [1..8]|i ne i1 and i ne i2];
	d := Determinant(Matrix(zeros));
	if d mod p eq 0 then
	 return false;
	end if;
	end for;
  end for;
  mons:=MonomialsOfDegree(R,3);
  for i in [1..6] do                //j'efface 8
   zeros:=[[Evaluate(m,X):m in mons]:X in pts[1..8]|X ne pts[i]];
   sing:=[[Evaluate(Derivative(m,R.j),pts[i]):m in mons]:j in [1,2,3]];
//i,Matrix(zeros cat sing);".";
  d := Determinant(Matrix(zeros cat sing));
  if d mod p eq 0 then
	return false;
  end if;
  end for;
  return true;  
end function;  

end_p:=17;
GP_all := [[] : j in [1..end_p]];
//GP_all;

F:=Rationals();
for p in [2..end_p] do
print "p is", p;
//for each prime p up to end_p, we run a brute force algorithm. We set up 8 points, run over all possible variable values in F_p, and determine whether those 8 points are in general position.
if IsPrime(p) then


for a,b,c,u,v,m in [2..p-1] do 
if v ne c then
if a ne b then

P1:=[0,1,1];
P2:=[0,1,a];
P3:=[1,0,1];
P4:=[1,0,b];
P5:=[1,1,1];
P6:=[1,1,u];
P7:=[m,1,v];
P8:=[m,1,c];
pts:=[P1,P2,P3,P4,P5,P6,P7,P8];
R<x,y,z>:=PolynomialRing(Integers(),3);

if GeneralPosition(R,pts,p) eq true then 
print p, pts;
Append(~GP_all[p], pts);
end if;

end if;
end if;
end for;

end if;
end for;



==========================================
==== Code for Theorems 6.6 and 6.7 =======
==========================================

//We determine whether any of the remaining cliques are realizable over F_p for p=17,19,23. 

//Use the function GeneralPosition(R,pts,p) from the code for Theorem 6.5.

//This code determines whether a given set of points lie on the cubic passing through all points but q and passing through p twice.
function SingularCubic(R,pts,p,q) 
  mons:=MonomialsOfDegree(R,3);
  zeros:=[[Evaluate(M,P):M in mons]:P in pts|P ne pts[p] and P ne pts[q]];
  sing:=[[Evaluate(Derivative(M,R.i),pts[p]):M in mons]:i in [1,2,3]];
  N:=Matrix([[m:m in mons]] cat zeros cat sing);
  return Determinant(N);
end function;

//This code determines whether a given set of points lie on the quartic passing through all points and singular at three specific points (given by list).
function SingularQuartic(R,pts,list) 
  mons:=MonomialsOfDegree(R,4);
  zeros:=[[Evaluate(M,P):M in mons]:P in pts| P notin [pts[i]:i in list]];
  sing:=&cat[[[Evaluate(Derivative(M,R.i),pts[j]):M in mons]:i in [1,2,3]]:j in list];
  N:=Matrix([[m:m in mons]] cat zeros cat sing);
  return Determinant(N);
end function;

//This code determines whether the given points lie on a quintic determined by the set of points, passing through the points not in list twice.
function SingularQuintic(R,pts,list)
mons:=MonomialsOfDegree(R,5);
zeros:=[[Evaluate(M,pts[i]):M in mons]:i in list];
sing:=&cat[[[Evaluate(Derivative(M,R.i),pts[j]):M in mons]:i in [1,2,3]]:j in [1..8]|j notin
list];
N:=Matrix([[m:m in mons]] cat zeros cat sing);
return Determinant(N);
end function;


//We begin a brute force search over all possible collections of 8 points in F_p through lines L_{12}, L_{34}, L_{56}, and L_{78} (see point set-up A in Section 4 of our paper)
F:=Rationals();
p:=17; //change to p=19,23 for those fields
for a,b,c,u,v,m in [2..p-1] do
if v ne c then
if a ne b then

P1:=[0,1,1];
P2:=[0,1,a];
P3:=[1,0,1];
P4:=[1,0,b];
P5:=[1,1,1];
P6:=[1,1,u];
P7:=[m,1,v];
P8:=[m,1,c];
X:=[0,0,1];
pts:=[P1,P2,P3,P4,P5,P6,P7,P8];
R<x,y,z>:=PolynomialRing(Integers(),3);
GP:=[];
cliques := [[],[],[],[],[],[],[],[],[]];

//First we determine whether the 8 points determines above lie in general position. If not, we move on. If they do, we start checking whether they realize a clique.
if GeneralPosition(R,pts,p) eq true then 
//print "gp", a,b,u,v,c,m;
//Append(~GP, pts)

//Now check conditions for each clique. We choose one representative of each clique as found in our list of suborbits. The 8 points realize a clique if they lie on all exceptional curves determined by this set and the concurrent point X. If such a realization exists, it would be added to a list that is printed to a file at the end.

//Computing all cliques at once will take several hours. We recommend splitting the computation up into a couple of cliques each time. 

//clique 1

C1:=SingularCubic(R,pts,1,2);
c1:=Evaluate(C1,[0,0,1]);
if c1 mod p eq 0 then
Q1:=SingularQuartic(R,pts,[2,4,7]);
q1:=Evaluate(Q1,[0,0,1]);
if q1 mod p eq 0 then
Q2:=SingularQuartic(R,pts,[3,6,7]);
q2:=Evaluate(Q2,[0,0,1]);
if q2 mod p eq 0 then
Q3:=SingularQuartic(R,pts,[2,3,5]);
q3:=Evaluate(Q3,[0,0,1]);
if q3 mod p eq 0 then
Q4:=SingularQuartic(R,pts,[2,6,8]);
q4:=Evaluate(Q4,[0,0,1]);
if q4 mod p eq 0 then
Q5:=SingularQuartic(R,pts,[4,5,8]);
q5:=Evaluate(Q5,[0,0,1]);
if q5 mod p eq 0 then
Append(~cliques[1], [a,b,c,u,v,m]);
print "clique 1";
print a,b,c,u,v,m;
end if; 
end if; 
end if; 
end if; 
end if; 
end if;

//clique 2
C1:=SingularCubic(R,pts,1,2);
c1:=Evaluate(C1,[0,0,1]);
if c1 mod p eq 0 then
C2:=SingularCubic(R,pts,3,4);
c2:=Evaluate(C2,[0,0,1]);
if c2 mod p eq 0 then
Q1:=SingularQuartic(R,pts,[2,5,7]);
q1:=Evaluate(Q1,[0,0,1]);
if (q1 mod p) eq 0 then
Q2:=SingularQuartic(R,pts,[4,5,8]);
q2:=Evaluate(Q2,[0,0,1]);
if (q2 mod p) eq 0 then
Q3:=SingularQuartic(R,pts,[2,6,8]);
q3:=Evaluate(Q3,[0,0,1]);
if (q3 mod p) eq 0 then
K1:=SingularQuintic(R,pts,[5,8]);
k1:=Evaluate(K1,[0,0,1]);
if (k1 mod p) eq 0 then 
Append(~cliques[2], [a,b,c,u,v,m]);
print "clique 2";
print a,b,c,u,v,m;
end if; 
end if; 
end if; 
end if; 
end if; 
end if;

//clique 3
C1:=SingularCubic(R,pts,1,2);
c1:=Evaluate(C1,[0,0,1]);
if c1 mod p eq 0 then
C2:=SingularQuartic(R,pts,[2,3,5]);
c2:=Evaluate(C2,[0,0,1]);
if c2 mod p eq 0 then
Q1:=SingularQuartic(R,pts,[3,6,7]);
q1:=Evaluate(Q1,[0,0,1]);
if (q1 mod p) eq 0 then
Q2:=SingularQuartic(R,pts,[2,4,7]);
q2:=Evaluate(Q2,[0,0,1]);
if (q2 mod p) eq 0 then
Q3:=SingularQuartic(R,pts,[4,5,8]);
q3:=Evaluate(Q3,[0,0,1]);
if (q3 mod p) eq 0 then
Q4:=SingularQuintic(R,pts,[5,7]);
k1:=Evaluate(Q4,[0,0,1]);
if (k1 mod p) eq 0 then
Append(~cliques[3], [a,b,c,u,v,m]);
print "clique 3";
print a,b,c,u,v,m;
end if; 
end if; 
end if; 
end if; 
end if; 
end if;

//clique 4 -- not possible outside char. 3
C1:=SingularQuartic(R,pts,[1,3,5]);
c1:=Evaluate(C1,[0,0,1]);
if c1 mod p eq 0 then
C2:=SingularQuartic(R,pts,[2,3,8]);
c2:=Evaluate(C2,[0,0,1]);
if c2 mod p eq 0 then
Q1:=SingularQuartic(R,pts,[3,6,7]);
q1:=Evaluate(Q1,[0,0,1]);
if (q1 mod p) eq 0 then
Q2:=SingularQuartic(R,pts,[2,4,6]);
q2:=Evaluate(Q2,[0,0,1]);
if (q2 mod p) eq 0 then
Q3:=SingularQuartic(R,pts,[1,4,7]);
q3:=Evaluate(Q3,[0,0,1]);
if (q3 mod p) eq 0 then
Q4:=SingularQuartic(R,pts,[1,6,8]);
k1:=Evaluate(Q4,[0,0,1]);
if (k1 mod p) eq 0 then
Append(~cliques[4], [a,b,c,u,v,m]);
print "clique 4";
print a,b,c,u,v,m;
end if; 
end if; 
end if; 
end if; 
end if; 
end if;

//clique 5 -- has examples
C1:=SingularQuartic(R,pts,[4,6,8]);
c1:=Evaluate(C1,[0,0,1]);
if c1 mod p eq 0 then
C2:=SingularQuartic(R,pts,[1,3,5]);
c2:=Evaluate(C2,[0,0,1]);
if c2 mod p eq 0 then
Q1:=SingularQuartic(R,pts,[2,5,8]);
q1:=Evaluate(Q1,[0,0,1]);
if (q1 mod p) eq 0 then
Q2:=SingularQuartic(R,pts,[1,3,7]);
q2:=Evaluate(Q2,[0,0,1]);
if (q2 mod p) eq 0 then
Q3:=SingularQuintic(R,pts,[4,5]);
q3:=Evaluate(Q3,[0,0,1]);
if (q3 mod p) eq 0 then
Q4:=SingularQuintic(R,pts,[1,8]);
k1:=Evaluate(Q4,[0,0,1]);
if (k1 mod p) eq 0 then
Append(~cliques[5], [a,b,c,u,v,m]);
print "clique 5";
print a,b,c,u,v,m;
end if; 
end if; 
end if; 
end if; 
end if; 
end if;

//clique 6
C1:=SingularCubic(R,pts,3,4);
c1:=Evaluate(C1,[0,0,1]);
if c1 mod p eq 0 then
C2:=SingularCubic(R,pts,1,2);
c2:=Evaluate(C2,[0,0,1]);
if c2 mod p eq 0 then
Q1:=SingularQuartic(R,pts,[2,5,7]);
q1:=Evaluate(Q1,[0,0,1]);
if (q1 mod p) eq 0 then
Q2:=SingularQuartic(R,pts,[4,6,7]);
q2:=Evaluate(Q2,[0,0,1]);
if (q2 mod p) eq 0 then
Q3:=SingularQuartic(R,pts,[4,5,8]);
q3:=Evaluate(Q3,[0,0,1]);
if (q3 mod p) eq 0 then
Q4:=SingularQuartic(R,pts,[2,6,8]);
k1:=Evaluate(Q4,[0,0,1]);
if (k1 mod p) eq 0 then
Append(~cliques[6], [a,b,c,u,v,m]);
print "clique 6";
print a,b,c,u,v,m;
end if; 
end if; 
end if; 
end if; 
end if; 
end if;

//clique 7 -- not possible at least in char. 0
C1:=SingularCubic(R,pts,7,8);
c1:=Evaluate(C1,[0,0,1]);
if c1 mod p eq 0 then
C2:=SingularCubic(R,pts,3,4);
c2:=Evaluate(C2,[0,0,1]);
if c2 mod p eq 0 then
Q1:=SingularCubic(R,pts,1,2);
q1:=Evaluate(Q1,[0,0,1]);
if (q1 mod p) eq 0 then
Q2:=SingularCubic(R,pts,5,6);
q2:=Evaluate(Q2,[0,0,1]);
if (q2 mod p) eq 0 then
Q3:=SingularQuintic(R,pts,[1,3]);
q3:=Evaluate(Q3,[0,0,1]);
if (q3 mod p) eq 0 then
Q4:=SingularQuintic(R,pts,[5,7]);
k1:=Evaluate(Q4,[0,0,1]);
if (k1 mod p) eq 0 then
Append(~cliques[7], [a,b,c,u,v,m]);
print "clique 7";
print a,b,c,u,v,m;
end if; 
end if; 
end if; 
end if; 
end if; 
end if;

//clique 8
C1:=SingularQuartic(R,pts,[1,3,5]);
c1:=Evaluate(C1,[0,0,1]);
if c1 mod p eq 0 then
C2:=SingularQuartic(R,pts,[2,3,8]);
c2:=Evaluate(C2,[0,0,1]);
if c2 mod p eq 0 then
Q1:=SingularQuartic(R,pts,[2,4,6]);
q1:=Evaluate(Q1,[0,0,1]);
if (q1 mod p) eq 0 then
Q2:=SingularQuartic(R,pts,[1,4,7]);
q2:=Evaluate(Q2,[0,0,1]);
if (q2 mod p) eq 0 then
Q3:=SingularQuartic(R,pts,[2,5,7]);
q3:=Evaluate(Q3,[0,0,1]);
if (q3 mod p) eq 0 then
Q4:=SingularQuartic(R,pts,[1,6,8]);
k1:=Evaluate(Q4,[0,0,1]);
if (k1 mod p) eq 0 then
Append(~cliques[8], [a,b,c,u,v,m]);
print "clique 8";
print a,b,c,u,v,m;
end if; 
end if; 
end if; 
end if; 
end if; 
end if;

end if;
end if;
end if;

end for;


